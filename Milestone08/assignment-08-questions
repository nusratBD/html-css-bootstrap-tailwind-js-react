How does useState work?

UseState is a hook by which we can get state variables in a functional component. First, we will pass the initial state to the useState function, which will return us a variable with the current state value and another function to update this value. 

Working Principle:

Before explaining its working method, first we need to write the syntax of useState.

const  [var, setVar] = useState(initial value);

We use setVar inside of a handler to update the value. So, when we pass a new value, the following steps happen behind the scenes:

step 1: The changes first come to the setVar inside of the handler.

step 2: Then, according to the new value, it calculates the changes and calls setVar where we declared the useState. SetVar announces the changes. That's why useState is called dispatcher. 

setp 3: While setVar calls the changes, recat observes them and compares the changes to where they occurred in the UI.

Step 4: After identifying the changing position, it renders the code and sends the updated value to var.

Step 5:Finally, from the variable, the data is updated in every place in the UI. 


State vs. Propositions

1. When we call them props, we can send data through them from one component to another component. However, state is a local storage space that cannot be shared with other components.

2. State can be changed asynchronously, but props carry read-only data, so data can not be updated from props. Depending on the changes in state value, the component renders frequently, but props couldn't take part here.

3. Props communicate among the components. state renders dynamic changes to a specific component.

4. Props can be accessed by a child component, but the state cannot be accessed.

5. Every component could have props, but no statless component could have a state.
